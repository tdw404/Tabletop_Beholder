AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Tabletop Beholder Service

Parameters:

  CognitoDomain:
    Type: String
    Description: A name for the Cognito Domain

  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment

  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'content-type,authorization'"
      AllowOrigin: "'*'"
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn

Resources:

  #-----------------------------------------------------
  # Cognito Configuration for user management
  #-----------------------------------------------------
  
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:8000
        - !If
            - DeployCloudFront
            - !Sub "https://${CloudFrontDistribution.DomainName}"
            - !Ref "AWS::NoValue"
      LogoutURLs:
        - http://localhost:8000
        - !If
            - DeployCloudFront
            - !Sub "https://${CloudFrontDistribution.DomainName}"
            - !Ref "AWS::NoValue"
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref UserPool


  #-----------------------------------------------------
  # CloudFront Configuration
  #-----------------------------------------------------

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: DeployCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless frontend website'

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: DeployCloudFront
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !Sub "${S3Bucket}.s3.us-east-2.amazonaws.com"
            OriginPath: /static
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployCloudFront
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"


  #-----------------------------------------------------
  # Role/Permissions/Policy Configuration
  #-----------------------------------------------------

  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'WriteToCloudWatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - cloudwatch:PutMetricData
              Resource: '*'

        - PolicyName: 'AccessEncounterTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: dynamodb:*
              Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_EncounterTable"

        - PolicyName: 'AccessSessionTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_SessionTable"
              - Effect: Allow
                Action: dynamodb:query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_SessionTable/index/SessionsSortByNameIndex"

        - PolicyName: 'AccessCreatureTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_CreatureTable"
              - Effect: Allow
                Action: dynamodb:query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_CreatureTable/index/CreaturesSortByNameIndex"

        - PolicyName: 'AccessActionTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_ActionTable"
              - Effect: Allow
                Action: dynamodb:query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_ActionTable/index/ActionsSortByNameIndex"

        - PolicyName: 'AccessSpellTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_SpellTable"
              - Effect: Allow
                Action: dynamodb:query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TabletopBeholder_SpellTable/index/SpellsSortByNameIndex"

  #-----------------------------------------------------
  # Lambda Functions Configuration
  #-----------------------------------------------------

  GetSpellLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.spell.GetSpellLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /spell/{objectId}
            Method: get

  GetAllSpellsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.spell.GetAllSpellsLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /spell
            Method: get

  CreateSpellLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.spell.CreateSpellLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /spell
            Method: post

  UpdateSpellLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.spell.UpdateSpellLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /spell
            Method: put

  DeleteSpellLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.spell.DeleteSpellLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /spell/{objectId}
            Method: delete

  GetActionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.action.GetActionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /action/{objectId}
            Method: get

  GetAllActionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.action.GetAllActionsLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /action
            Method: get

  CreateActionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.action.CreateActionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /action
            Method: post

  UpdateActionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.action.UpdateActionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /action
            Method: put

  DeleteActionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.action.DeleteActionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /action/{objectId}
            Method: delete
            
  GetCreatureLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.creature.GetCreatureLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /creature/{objectId}
            Method: get

  GetAllCreaturesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.creature.GetAllCreaturesLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /creature
            Method: get

  CreateCreatureLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.creature.CreateCreatureLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /creature
            Method: post

  UpdateCreatureLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.creature.UpdateCreatureLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /creature
            Method: put

  DeleteCreatureLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.creature.DeleteCreatureLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /creature/{objectId}
            Method: delete

  GetEncounterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.encounter.GetEncounterLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /encounter/{objectId}
            Method: get

  GetAllEncountersLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.encounter.GetAllEncountersLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /encounter
            Method: get

  CreateEncounterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.encounter.CreateEncounterLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /encounter
            Method: post

  UpdateEncounterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.encounter.UpdateEncounterLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /encounter
            Method: put

  DeleteEncounterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.encounter.DeleteEncounterLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /encounter/{objectId}
            Method: delete
            
  GetSessionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.session.GetSessionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /session/{objectId}
            Method: get

  GetAllSessionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.session.GetAllSessionsLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /session
            Method: get

  CreateSessionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.session.CreateSessionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /session
            Method: post

  UpdateSessionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.session.UpdateSessionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /session
            Method: put

  DeleteSessionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.session.DeleteSessionLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /session/{objectId}
            Method: delete

  CreateTemplateSpellLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.templateSpell.CreateTemplateSpellLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /spellTemplate/{slug}
            Method: post

  GetTemplateSpellLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: app
      Handler: dev.tdwalsh.project.tabletopBeholder.lambda.templateSpell.GetTemplateSpellLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        TabletopBeholder:
          Type: Api
          Properties:
            Path: /spellTemplate/{slug}
            Method: get
  #-----------------------------------------------------
  # DynamoDB Configuration
  #-----------------------------------------------------

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "userEmail"
          AttributeType: "S"
        - AttributeName: "objectId"
          AttributeType: "S"
        - AttributeName: "objectName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userEmail"
          KeyType: "HASH"
        - AttributeName: "objectId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "TabletopBeholder_SessionTable"
      GlobalSecondaryIndexes:
        - IndexName: "SessionsSortByNameIndex"
          KeySchema:
            - AttributeName: "userEmail"
              KeyType: "HASH"
            - AttributeName: "objectName"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "KEYS_ONLY"

  EncounterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "userEmail"
          AttributeType: "S"
        - AttributeName: "objectId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userEmail"
          KeyType: "HASH"
        - AttributeName: "objectId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "TabletopBeholder_EncounterTable"

  CreatureTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "userEmail"
          AttributeType: "S"
        - AttributeName: "objectId"
          AttributeType: "S"
        - AttributeName: "objectName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userEmail"
          KeyType: "HASH"
        - AttributeName: "objectId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "TabletopBeholder_CreatureTable"
      GlobalSecondaryIndexes:
        - IndexName: "CreaturesSortByNameIndex"
          KeySchema:
            - AttributeName: "userEmail"
              KeyType: "HASH"
            - AttributeName: "objectName"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "KEYS_ONLY"

  ActionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "userEmail"
          AttributeType: "S"
        - AttributeName: "objectId"
          AttributeType: "S"
        - AttributeName: "objectName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userEmail"
          KeyType: "HASH"
        - AttributeName: "objectId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "TabletopBeholder_ActionTable"
      GlobalSecondaryIndexes:
        - IndexName: "ActionsSortByNameIndex"
          KeySchema:
            - AttributeName: "userEmail"
              KeyType: "HASH"
            - AttributeName: "objectName"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "KEYS_ONLY"

  SpellTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "userEmail"
          AttributeType: "S"
        - AttributeName: "objectId"
          AttributeType: "S"
        - AttributeName: "objectName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userEmail"
          KeyType: "HASH"
        - AttributeName: "objectId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "TabletopBeholder_SpellTable"
      GlobalSecondaryIndexes:
        - IndexName: "SpellsSortByNameIndex"
          KeySchema:
            - AttributeName: "userEmail"
              KeyType: "HASH"
            - AttributeName: "objectName"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "KEYS_ONLY"

#-----------------------------------------------------
# The outputs defined below will be printed
#  to the screen after a successful deploy
#-----------------------------------------------------

Outputs:

  CognitoUserPoolId:
    Value: !Ref UserPool
    Description: "The Cognito User Pool ID (COGNITO_USER_POOL_ID)."
  CognitoUserPoolClientId:
    Value: !Ref UserPoolClient
    Description: "The Cognito User Pool Client ID (COGNITO_USER_POOL_CLIENT_ID)."
  CognitoDomain:
    Value: !Sub "${CognitoDomain}.auth.us-east-2.amazoncognito.com"
    Description: "The Cognito Domain (COGNITO_DOMAIN)."

  ApiBaseUrl:
    Description: "API Gateway endpoint base URL for Prod stage (API_BASE_URL)."
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CognitoRedirectSignin:
    Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNIN)."
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Condition: DeployCloudFront
  CognitoRedirectSignout:
    Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNOUT)."
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Condition: DeployCloudFront
