package dev.tdwalsh.project.tabletopBeholder.resource;

import dev.tdwalsh.project.tabletopBeholder.dynamodb.models.Action;
import dev.tdwalsh.project.tabletopBeholder.dynamodb.models.Creature;
import dev.tdwalsh.project.tabletopBeholder.dynamodb.models.Effect;
import dev.tdwalsh.project.tabletopBeholder.dynamodb.models.Spell;

import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreatureHelper {
    public static Creature provideCreature(Integer mod) {
        Creature creature = new Creature();
        creature.setUserEmail("userEmail" + mod);
        creature.setObjectId("objectId" + mod);
        creature.setObjectName("objectName" + mod);
        creature.setEncounterCreatureId("encounterCreatureId" + mod);
        creature.setEncounterCreatureId("encounterCreatureId" + mod);
        creature.setDraftStatus(true);
        creature.setObjectName("objectName" + mod);
        creature.setIsPC(true);
        creature.setPcLevel(mod);
        creature.setSourceBook("sourceBook" + mod);
        creature.setCreatureDescription("creatureDescription" + mod);
        creature.setSize("size" + mod);
        creature.setType("type" + mod);
        creature.setSubType("subType" + mod);
        creature.setGroup("group" + mod);
        creature.setAlignment("creatureAlignment" + mod);
        creature.setArmorClass(mod);
        creature.setArmorType("creatureArmor" + mod);
        Map<String, Effect> effectMap = new HashMap<>();
        Effect effect1 = EffectHelper.provideEffect(1);
        Effect effect2 = EffectHelper.provideEffect(2);
        effectMap.put(effect1.getObjectId(), effect1);
        effectMap.put(effect2.getObjectId(), effect2);
        creature.setActiveEffects(effectMap);
        creature.setKnockedOut(false);
        creature.setDead(false);
        creature.setDeathSaves(mod);
        creature.setHitPoints(mod);
        creature.setCurrentHitPoints(mod);
        creature.setHitDice("hitDice" + mod);
        creature.setCurrentHitDice(mod);
        Map<String, Integer> testMap = new HashMap<>();
        testMap.put("test1", 1);
        testMap.put("test2", 2);
        creature.setSpeedMap(testMap);
        creature.setStatMap(testMap);
        creature.setSaveMap(testMap);
        creature.setPassivePerception(mod);
        creature.setSkillsMap(testMap);
        creature.setVulnerabilities("vulnerabilities" + mod);
        creature.setResistances("resistances" + mod);
        creature.setImmunities("immunities" + mod);
        creature.setConditionImmunities("conditionImmunities" + mod);
        creature.setSenses("senses" + mod);
        creature.setLanguages("languages" + mod);
        creature.setChallengeRating(new Double(mod));
        List<Action> actionList = new ArrayList<>();
        actionList.add(ActionHelper.provideAction(1));
        actionList.add(ActionHelper.provideAction(2));
        Map<String,List<Action>> actionMap = new HashMap<>();
        actionMap.put("string1", actionList);
        actionMap.put("string2", actionList);
        //creature.setActionMap(actionMap);
        creature.setLegendaryDesc("legendaryDesc" + mod);
        Map<String,Spell> spellMap = new HashMap<>();
        Spell spell1 = SpellHelper.provideSpell(1);
        Spell spell2 = SpellHelper.provideSpell(2);
        spellMap.put(spell1.getObjectId(), spell1);
        spellMap.put(spell2.getObjectId(), spell2);
        creature.setSpellMap(spellMap);
        Map<Integer, Integer> testMap2 = new HashMap<>();
        testMap2.put(1, mod);
        testMap2.put(2, mod);
        creature.setSpellSlots(testMap2);
        creature.setSpellcastingAbility("spellcastingAbility" + mod);
        creature.setSpellSaveDC("spellSaveDC" + mod);
        creature.setSpellAttackModifier("spellAttackModifier" + mod);
        creature.setCreateDateTime(ZonedDateTime.now());
        creature.setEditDateTime(ZonedDateTime.now());
        return creature;
    }
}
